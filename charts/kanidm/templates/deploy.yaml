apiVersion: apps/v1
# TODO: this should be a stateful set
kind: Deployment
metadata:
  name: kanidm
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: kanidm
  # Replication in very early stages in kanidm. The Helm chart only has support
  # for a single replica.
  # https://kanidm.github.io/kanidm/stable/repl/planning.html
  replicas: 1
  template:
    metadata:
      labels:
        app: kanidm
    spec:
      containers:
      - image: kanidm/server:{{ .Chart.AppVersion }}
        name: kanidm
        ports:
          - name: https
            containerPort: 8443
          - name: ldaps
            containerPort: 3636
        # Fails - but why?
        # because TLS is not correctly configured, we need to use local curl instead
        # curl https://idm.kammel.dev:8443/status --cacert /tls/tls.crt --resolve idm.kammel.dev:8443:127.0.0.1
        # livenessProbe:
        #   httpGet:
        #     path: /status
        #     port: https
        #   initialDelaySeconds: 30
        # TODO: migrate some configuration env vars instead?
        env:
        # This is not documented in the kanidm docs, but the ServerConfig code
        # https://kanidm.github.io/kanidm/master/rustdoc/kanidmd_core/config/struct.ServerConfig.html#structfield.adminbindpath
        - name: KANIDM_ADMIN_BIND_PATH
          value: "/var/run/kanidmd.sock"
        volumeMounts:
        - name: tls
          mountPath: /tls
          readOnly: true
        - name: db
          mountPath: /db
        - name: backup
          mountPath: /backups
        - name: config
          mountPath: /data/server.toml
          subPath: server.toml
          readOnly: true
        - name: socket-volume
          mountPath: /var/run
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
      volumes:
      - name: tls
        secret:
          secretName: {{ .Values.ingress.tlsSecretName }}
      - name: db
        persistentVolumeClaim:
          claimName: kanidm-db
      - name: backup
        persistentVolumeClaim:
          claimName: kanidm-backup
      - name: config
        configMap:
          name: kanidm-config
          items:
          - key: server.toml
            path: server.toml
      - name: socket-volume
        emptyDir: {}
      securityContext:
        runAsGroup: 5000
        runAsUser: 5000
        seccompProfile:
          type: RuntimeDefault
        runAsNonRoot: true
